name: KTB Image Upload

on:
  repository_dispatch:
    types: [upload-zip]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # JOB 1: Đọc config
  setup:
    runs-on: ubuntu-latest
    outputs:
      sites_matrix: ${{ steps.set_matrix.outputs.sites }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Read sites config and set matrix
        id: set_matrix
        run: |
          SITES_JSON=$(jq -c '.sites' config.json)
          echo "sites=${SITES_JSON}" >> $GITHUB_OUTPUT

  # JOB 2: Upload file
  upload:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        site: ${{ fromJson(needs.setup.outputs.sites_matrix) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Checkout ktb-image repo
        uses: actions/checkout@v4
        with:
          repository: ktbhub/ktb-image
          path: ktb-image
          token: ${{ secrets.KTBHUB_PAT }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Upload and Process for ${{ matrix.site.slug }}
        id: upload_process
        env:
          SITE_CONFIG_JSON: ${{ toJSON(matrix.site) }}
          KTBTEE_VPS_HOST: ${{ secrets.KTBTEE_VPS_HOST }}
          KTBTEE_VPS_USERNAME: ${{ secrets.KTBTEE_VPS_USERNAME }}
          KTBTEE_SSH_PRIVATE_KEY: ${{ secrets.KTBTEE_SSH_PRIVATE_KEY }}
          KTBTEE_VPS_PORT: ${{ secrets.KTBTEE_VPS_PORT }}
          WHATWILLWEAR_VPS_HOST: ${{ secrets.WHATWILLWEAR_VPS_HOST }}
          WHATWILLWEAR_VPS_USERNAME: ${{ secrets.WHATWILLWEAR_VPS_USERNAME }}
          WHATWILLWEAR_SSH_PRIVATE_KEY: ${{ secrets.WHATWILLWEAR_SSH_PRIVATE_KEY }}
          WHATWILLWEAR_VPS_PORT: ${{ secrets.WHATWILLWEAR_VPS_PORT }}
          VFLIPPA_VPS_HOST: ${{ secrets.VFLIPPA_VPS_HOST }}
          VFLIPPA_VPS_USERNAME: ${{ secrets.VFLIPPA_VPS_USERNAME }}
          VFLIPPA_SSH_PRIVATE_KEY: ${{ secrets.VFLIPPA_SSH_PRIVATE_KEY }}
          VFLIPPA_VPS_PORT: ${{ secrets.VFLIPPA_VPS_PORT }}
          PRINTIMENT_VPS_HOST: ${{ secrets.PRINTIMENT_VPS_HOST }}
          PRINTIMENT_VPS_USERNAME: ${{ secrets.PRINTIMENT_VPS_USERNAME }}
          PRINTIMENT_SSH_PRIVATE_KEY: ${{ secrets.PRINTIMENT_SSH_PRIVATE_KEY }}
          PRINTIMENT_VPS_PORT: ${{ secrets.PRINTIMENT_VPS_PORT }}
        run: node upload-script.js
      - name: Commit and push log file
        if: success() && steps.upload_process.outputs.uploaded_count > 0
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add uploaded_files_${{ matrix.site.slug }}.log
          git commit -m "Update log for ${{ matrix.site.slug }}" || echo "No changes to commit"
          git pull --rebase
          git push
      - name: Archive report file
        if: success() && steps.upload_process.outputs.uploaded_count > 0
        uses: actions/upload-artifact@v4
        with:
          # SỬA LỖI: Tạo tên artifact duy nhất cho mỗi site
          name: report-${{ matrix.site.slug }}
          path: ${{ matrix.site.slug }}_report.txt

# JOB 3: Gửi báo cáo (Đã sửa lỗi định dạng \n)
  report:
    needs: upload
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all report files
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          path: all-reports
          if-no-files-found: warn
          
      - name: Create and Send Report
        env:
          TELEGRAM_TO: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          MESSAGE_HEADER="✅ *KTB Image Upload - Done*"
          
          if [ -z "$(ls -A all-reports 2>/dev/null)" ]; then
            MESSAGE_BODY="Không có file mới nào được upload trong lần chạy này."
          else
            # Ghép nội dung của tất cả các file .txt lại
            MESSAGE_BODY=$(find all-reports -type f -name "*.txt" -print0 | xargs -0 cat | paste -sd '\n' -)
          fi

          # SỬA LỖI: Dùng `printf` để tạo tin nhắn với ký tự xuống dòng thật sự
          FULL_MESSAGE=$(printf "%s\n\n%s" "$MESSAGE_HEADER" "$MESSAGE_BODY")

          # Dùng jq để tạo JSON payload an toàn
          JSON_PAYLOAD=$(jq -n --arg text "$FULL_MESSAGE" \
            '{chat_id: env.TELEGRAM_TO, text: $text, parse_mode: "Markdown"}')

          # Gửi tin nhắn bằng curl
          curl -s -X POST -H 'Content-Type: application/json' \
            "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d "$JSON_PAYLOAD"
