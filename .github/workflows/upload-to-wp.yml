name: KTB Image Upload

on:
  repository_dispatch:
    types: [upload-zip]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # JOB 1: Đọc config
  setup:
    runs-on: ubuntu-latest
    outputs:
      sites_matrix: ${{ steps.set_matrix.outputs.sites }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Read sites config and set matrix
        id: set_matrix
        run: |
          SITES_JSON=$(jq -c '.sites' config.json)
          echo "sites=${SITES_JSON}" >> $GITHUB_OUTPUT

  # JOB 2: Upload file
  upload:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        site: ${{ fromJson(needs.setup.outputs.sites_matrix) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Checkout ktb-image repo
        uses: actions/checkout@v4
        with:
          repository: ktbhub/ktb-image
          path: ktb-image
          token: ${{ secrets.KTBHUB_PAT }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Upload and Process for ${{ matrix.site.slug }}
        id: upload_process
        env:
          SITE_CONFIG_JSON: ${{ toJSON(matrix.site) }}
          KTBTEE_VPS_HOST: ${{ secrets.KTBTEE_VPS_HOST }}
          KTBTEE_VPS_USERNAME: ${{ secrets.KTBTEE_VPS_USERNAME }}
          KTBTEE_SSH_PRIVATE_KEY: ${{ secrets.KTBTEE_SSH_PRIVATE_KEY }}
          KTBTEE_VPS_PORT: ${{ secrets.KTBTEE_VPS_PORT }}
          WHATWILLWEAR_VPS_HOST: ${{ secrets.WHATWILLWEAR_VPS_HOST }}
          WHATWILLWEAR_VPS_USERNAME: ${{ secrets.WHATWILLWEAR_VPS_USERNAME }}
          WHATWILLWEAR_SSH_PRIVATE_KEY: ${{ secrets.WHATWILLWEAR_SSH_PRIVATE_KEY }}
          WHATWILLWEAR_VPS_PORT: ${{ secrets.WHATWILLWEAR_VPS_PORT }}
          VFLIPPA_VPS_HOST: ${{ secrets.VFLIPPA_VPS_HOST }}
          VFLIPPA_VPS_USERNAME: ${{ secrets.VFLIPPA_VPS_USERNAME }}
          VFLIPPA_SSH_PRIVATE_KEY: ${{ secrets.VFLIPPA_SSH_PRIVATE_KEY }}
          VFLIPPA_VPS_PORT: ${{ secrets.VFLIPPA_VPS_PORT }}
          PRINTIMENT_VPS_HOST: ${{ secrets.PRINTIMENT_VPS_HOST }}
          PRINTIMENT_VPS_USERNAME: ${{ secrets.PRINTIMENT_VPS_USERNAME }}
          PRINTIMENT_SSH_PRIVATE_KEY: ${{ secrets.PRINTIMENT_SSH_PRIVATE_KEY }}
          PRINTIMENT_VPS_PORT: ${{ secrets.PRINTIMENT_VPS_PORT }}
          ALBUMCOVERPRINT_VPS_HOST: ${{ secrets.ALBUMCOVERPRINT_VPS_HOST }}
          ALBUMCOVERPRINT_VPS_USERNAME: ${{ secrets.ALBUMCOVERPRINT_VPS_USERNAME }}
          ALBUMCOVERPRINT_SSH_PRIVATE_KEY: ${{ secrets.ALBUMCOVERPRINT_SSH_PRIVATE_KEY }}
          ALBUMCOVERPRINT_VPS_PORT: ${{ secrets.ALBUMCOVERPRINT_VPS_PORT }}
        run: node upload-script.js
      - name: Archive report file
        if: success() && steps.upload_process.outputs.uploaded_count > 0
        uses: actions/upload-artifact@v4
        with:
          # SỬA LỖI: Tạo tên artifact duy nhất cho mỗi site
          name: report-${{ matrix.site.slug }}
          path: ${{ matrix.site.slug }}_report.txt

# JOB 3: Tạo log, Commit log và Gửi báo cáo (Phiên bản cuối)
  report:
    needs: upload
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all report files
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          path: all-reports
          if-no-files-found: warn

      - name: Generate Log, Manage History, and Send Report
        env:
          TELEGRAM_TO: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          # --- 1. Tổng hợp kết quả từ các file report ---
          UPLOADED_FILES_LIST=""
          if [ -d "all-reports" ] && [ -n "$(ls -A all-reports)" ]; then
            UPLOADED_FILES_LIST=$(find all-reports -type f -name "*.txt" -exec cat {} +)
          fi

          # --- 2. Tạo nội dung cho file log ---
          TIMESTAMP=$(TZ='Asia/Ho_Chi_Minh' date +"%Y-%m-%d %H:%M:%S %z")
          LOG_HEADER="--- Summary of Last Upload ---\nGenerated at: $TIMESTAMP"

          if [ -z "$UPLOADED_FILES_LIST" ]; then
            # Nội dung chi tiết cho file log trong trường hợp thất bại
            LOG_BODY_FOR_FILE="Upload thất bại."
          else
            # Nội dung chi tiết cho file log trong trường hợp thành công
            LOG_BODY_FOR_FILE="$UPLOADED_FILES_LIST"
          fi
          
          # Combine lại thành một khối log hoàn chỉnh để lưu vào file
          NEW_LOG_BLOCK_FOR_FILE=$(printf "%s\n\n%s\n" "$LOG_HEADER" "$LOG_BODY_FOR_FILE")

          # --- 3. Cập nhật và quản lý file upload.log (giữ 10 lần gần nhất) ---
          # (Phần này không thay đổi)
          echo -e "$NEW_LOG_BLOCK_FOR_FILE" > temp_log.log
          if [ -f upload.log ]; then
            cat upload.log >> temp_log.log
          fi
          LOG_COUNT=$(grep -c "^--- Summary" temp_log.log)
          if [ "$LOG_COUNT" -gt 10 ]; then
            TRIM_LINE=$(grep -n "^--- Summary" temp_log.log | sed -n '11p' | cut -d: -f1)
            head -n $((TRIM_LINE - 1)) temp_log.log > upload.log
          else
            mv temp_log.log upload.log
          fi

          # --- 4. Commit file upload.log mới vào repo ---
          # (Phần này không thay đổi)
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add upload.log
          if ! git diff --staged --quiet; then
            git commit -m "Update upload.log"
            git pull --rebase
            git push
          else
            echo "No changes to upload.log to commit."
          fi

          # --- 5. Chuẩn bị và gửi tin nhắn Telegram THEO YÊU CẦU MỚI ---
          if [ -z "$UPLOADED_FILES_LIST" ]; then
            FINAL_STATUS="Upload thất bại."
            # Nếu thất bại, phần thân tin nhắn sẽ trống
            MESSAGE_BODY=""
          else
            FINAL_STATUS="Upload thành công."
            # Nếu thành công, phần thân tin nhắn là danh sách file
            MESSAGE_BODY="$UPLOADED_FILES_LIST"
          fi

          # Tạo nội dung tin nhắn cốt lõi (header + body)
          # Dùng if để xử lý trường hợp body trống, tránh tạo ra các dòng trắng thừa
          if [ -z "$MESSAGE_BODY" ]; then
            MESSAGE_CORE=$(printf "%s" "$LOG_HEADER")
          else
            MESSAGE_CORE=$(printf "%s\n\n%s" "$LOG_HEADER" "$MESSAGE_BODY")
          fi
          
          # Nối dòng trạng thái cuối cùng vào tin nhắn
          FULL_MESSAGE=$(printf "%s\n\n%s" "$MESSAGE_CORE" "$FINAL_STATUS")

          # Gửi tin nhắn dạng text thường (đã xóa parse_mode)
          JSON_PAYLOAD=$(jq -n --arg text "$FULL_MESSAGE" \
            '{chat_id: env.TELEGRAM_TO, text: $text}')

          # Gửi tin nhắn bằng curl
          curl -s -X POST -H 'Content-Type: application/json' \
            "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d "$JSON_PAYLOAD"
