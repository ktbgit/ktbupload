name: KTB Image Upload

on:
  repository_dispatch:
    types: [upload-zip]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # JOB 1: Đọc config
  setup:
    runs-on: ubuntu-latest
    outputs:
      sites_matrix: ${{ steps.set_matrix.outputs.sites }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Read sites config and set matrix
        id: set_matrix
        run: |
          SITES_JSON=$(jq -c '.sites' config.json)
          echo "sites=${SITES_JSON}" >> $GITHUB_OUTPUT

  # JOB 2: Upload file
  upload:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        site: ${{ fromJson(needs.setup.outputs.sites_matrix) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Checkout ktb-image repo
        uses: actions/checkout@v4
        with:
          repository: ktbhub/ktb-image
          path: ktb-image
          token: ${{ secrets.KTBHUB_PAT }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Upload and Process for ${{ matrix.site.slug }}
        id: upload_process
        env:
          SITE_CONFIG_JSON: ${{ toJSON(matrix.site) }}
          KTBTEE_VPS_HOST: ${{ secrets.KTBTEE_VPS_HOST }}
          KTBTEE_VPS_USERNAME: ${{ secrets.KTBTEE_VPS_USERNAME }}
          KTBTEE_SSH_PRIVATE_KEY: ${{ secrets.KTBTEE_SSH_PRIVATE_KEY }}
          KTBTEE_VPS_PORT: ${{ secrets.KTBTEE_VPS_PORT }}
          WHATWILLWEAR_VPS_HOST: ${{ secrets.WHATWILLWEAR_VPS_HOST }}
          WHATWILLWEAR_VPS_USERNAME: ${{ secrets.WHATWILLWEAR_VPS_USERNAME }}
          WHATWILLWEAR_SSH_PRIVATE_KEY: ${{ secrets.WHATWILLWEAR_SSH_PRIVATE_KEY }}
          WHATWILLWEAR_VPS_PORT: ${{ secrets.WHATWILLWEAR_VPS_PORT }}
          VFLIPPA_VPS_HOST: ${{ secrets.VFLIPPA_VPS_HOST }}
          VFLIPPA_VPS_USERNAME: ${{ secrets.VFLIPPA_VPS_USERNAME }}
          VFLIPPA_SSH_PRIVATE_KEY: ${{ secrets.VFLIPPA_SSH_PRIVATE_KEY }}
          VFLIPPA_VPS_PORT: ${{ secrets.VFLIPPA_VPS_PORT }}
          PRINTIMENT_VPS_HOST: ${{ secrets.PRINTIMENT_VPS_HOST }}
          PRINTIMENT_VPS_USERNAME: ${{ secrets.PRINTIMENT_VPS_USERNAME }}
          PRINTIMENT_SSH_PRIVATE_KEY: ${{ secrets.PRINTIMENT_SSH_PRIVATE_KEY }}
          PRINTIMENT_VPS_PORT: ${{ secrets.PRINTIMENT_VPS_PORT }}
          ALBUMCOVERPRINT_VPS_HOST: ${{ secrets.ALBUMCOVERPRINT_VPS_HOST }}
          ALBUMCOVERPRINT_VPS_USERNAME: ${{ secrets.ALBUMCOVERPRINT_VPS_USERNAME }}
          ALBUMCOVERPRINT_SSH_PRIVATE_KEY: ${{ secrets.ALBUMCOVERPRINT_SSH_PRIVATE_KEY }}
          ALBUMCOVERPRINT_VPS_PORT: ${{ secrets.ALBUMCOVERPRINT_VPS_PORT }}
        run: node upload-script.js
      - name: Archive report file
        if: success() && steps.upload_process.outputs.uploaded_count > 0
        uses: actions/upload-artifact@v4
        with:
          # SỬA LỖI: Tạo tên artifact duy nhất cho mỗi site
          name: report-${{ matrix.site.slug }}
          path: ${{ matrix.site.slug }}_report.txt

# JOB 3: Tạo log, Commit log và Gửi báo cáo (Giải pháp dùng file, ổn định hơn)
  report:
    needs: upload
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all report files
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          path: all-reports
          if-no-files-found: warn

      - name: Generate Log, Manage History, and Send Report
        env:
          TELEGRAM_TO: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          # --- 1. Tạo một file báo cáo tổng hợp từ tất cả các report nhỏ ---
          # File này sẽ chứa danh sách tất cả các file đã upload, mỗi file một dòng
          touch aggregated_list.txt
          if [ -d "all-reports" ] && [ -n "$(ls -A all-reports/*.txt 2>/dev/null)" ]; then
              # Nối nội dung của tất cả các file .txt vào file tổng hợp
              find all-reports -type f -name "*.txt" -exec cat {} + > aggregated_list.txt
          fi

          # --- 2. Xây dựng nội dung cuối cùng vào một file duy nhất ---
          # File "final_content.txt" sẽ là nội dung cho cả upload.log và tin nhắn Telegram
          TIMESTAMP=$(TZ='Asia/Ho_Chi_Minh' date +"%Y-%m-%d %H:%M:%S %z")
          printf "--- Summary of Last Upload ---\nGenerated at: %s\n\n" "$TIMESTAMP" > final_content.txt

          # Kiểm tra file tổng hợp có nội dung không để quyết định thành công/thất bại
          # Dùng `if [ -s file ]` để kiểm tra file có nội dung (size > 0)
          if [ -s aggregated_list.txt ]; then
              cat aggregated_list.txt >> final_content.txt
              printf "\n\nUpload thành công." >> final_content.txt
          else
              printf "Upload thất bại." >> final_content.txt
          fi

          # --- 3. Cập nhật và quản lý file upload.log ---
          # Tạo một file log tạm thời bằng cách ghép nội dung mới và log cũ
          # Dùng cat và file tạm để tránh các lỗi với biến
          cp final_content.txt temp_log.log
          if [ -f upload.log ]; then
              # Thêm 2 dòng trắng để phân cách các lần log
              printf "\n\n" >> temp_log.log 
              cat upload.log >> temp_log.log
          fi
          
          # Cắt log để chỉ giữ 10 lần gần nhất
          LOG_COUNT=$(grep -c "^--- Summary" temp_log.log)
          if [ "$LOG_COUNT" -gt 10 ]; then
              TRIM_LINE=$(grep -n "^--- Summary" temp_log.log | sed -n '11p' | cut -d: -f1)
              head -n $((TRIM_LINE - 1)) temp_log.log > upload.log
          else
              mv temp_log.log upload.log
          fi

          # --- 4. Commit file upload.log ---
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add upload.log
          if ! git diff --staged --quiet; then
              git commit -m "Update upload.log"
              git pull --rebase
              git push
          else
              echo "No changes to upload.log to commit."
          fi

          # --- 5. Gửi tin nhắn Telegram từ nội dung file ---
          # Dùng `jq --rawfile` để đọc trực tiếp nội dung từ file, tránh hoàn toàn lỗi với biến
          JSON_PAYLOAD=$(jq -n --rawfile text final_content.txt \
            '{chat_id: env.TELEGRAM_TO, text: $text}')

          curl -s -X POST -H 'Content-Type: application/json' \
            "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d "$JSON_PAYLOAD"
